
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
// bool positive(int x){            //normal function
//     return x>0;
// }

int main()
{
cout<<[](int a){return a+6;}(6);
cout<<[](int a){return a*a;}(6);
cout<<[](int a,int b){return a+b;}(6,4);

}
// ======================== ascending /decending with lambda function =========================================
#include <iostream>
using namespace std;
#include<algorithm>
#include<vector>
int main()
{
 vector<int>v={4,1,3,2,7};
 sort(v.begin(),v.end(), less<int>());//less<int>() jo h function object h or ye value ko assending kr deta h or ye optinal h use v kr sakte or nhi v;
 sort(v.begin(),v.end(), greater<int>()); //greater<int>() jo h function object h or ye value ko descending kr deta h or ye optinal h use v kr sakte or nhi v;  
 sort(v.begin(),v.end(), [](int a,int b) {return a>b;});
 for(auto p:v){
     cout<<p<<"\t";
 }
 cout<<[] (int a){return a+10;}(5);
 cout<<[] (int a, int b){return a>b;}(20,3)<<"\t";
 auto k=[](int a) {return a*a;};
 cout<<k(7);
}
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int main()
{
     vector<int>v={4,1,3,2,7};
 sort(v.begin(),v.end(), less<int>());
 for(auto p:v)
 {
     cout<<p;
 }
    
}
// ----------------------------------------------------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int main()
{
     vector<int>v={4,1,3,2,7};
 sort(v.begin(),v.end(), greater<int>());
 for(auto p:v)
 {
     cout<<p;
 }
    
}
// ============================================================================================
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int main()
{
    cout<<[](int x){return x+5;}(2);
}
// ===================================================================================
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int main()
{
    auto sum=[](int a,int b){return a+b;}(3,5);
        cout<<sum;
    
}
// ================lambda expression ke sare function true false return kerte hai =============
// ===============================( all of function )=================================
// =======================positive /negative=========================
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int main()
{                                  // output=1
   vector<int> v={3,5,6,8,6};
   cout<<all_of(v.begin(),v.end(),
   [](int x){return x>0;});
}
// ---------------------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
bool positive(int x){            //normal function
    return x>0;
}

int main()
{
   vector<int> v={3,-5,6,8,6};
   cout<<all_of(v.begin(),v.end(),positive);
//   [](int x){return x>0;});
}
// ----------------------------(even/odd)=========================
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
// bool positive(int x){            //normal function
//     return x>0;
// }

int main()
{
   vector<int> v={8,4,6,8,6};
   cout<<all_of(v.begin(),v.end(),
  [](int x){return x%2==0;});
}
// =========================( any of function)=============================
// (any_of) function me  agar no.of value me ek bhi (+) to bhi out put 1 aayega 
// aur agar sare element (-)hai to output 0 aayega 
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
// bool positive(int x){            //normal function
//     return x>0;
// }

int main()
{
   vector<int> v={-3,-5,-6,-8,-6};
   cout<<any_of(v.begin(),v.end(),
  [](int x){return x>0;});
}
// =============================(none_of function)=================================
// (none_of) function me  agar no.of value positive aur  ek bhi (-) to bhi out put 0aayega 
//  aur agar sare element (-)hai  to output 1 aayega 
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
// bool positive(int x){            //normal function
//     return x>0;
// }

int main()
{
   vector<int> v={-3,-5,6,-8,-6};
   cout<<none_of(v.begin(),v.end(),
  [](int x){return x>0;});
}